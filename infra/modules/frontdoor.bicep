// Parameters
param frontDoorName string
param customDomainSuffix string
param frontDoorSkuName string = 'Premium_AzureFrontDoor'
param privateLinkResourceId string
param workspaceId string
//param hostName string
param origins array

param location string = resourceGroup().location
param tags object = {}
param originResponseTimeoutSeconds int = 30
param httpPort int = 80
param httpsPort int = 443
param priority int = 1
param weight int = 1000
param originEnabledState string = 'Enabled'
param sampleSize int = 4
param successfulSamplesRequired int = 3
param additionalLatencyInMilliseconds int = 50

//param probePath string = '/healthz'
param probeRequestType string = 'GET'
param probeProtocol string = 'Https'
param probeIntervalInSeconds int = 60

param sessionAffinityState string = 'Disabled'
param autoGeneratedDomainNameLabelScope string = 'TenantReuse'
param originPath string = '/'
param ruleSets array = []
param routePatternsToMatch array = [ '/*' ]
param forwardingProtocol string = 'HttpsOnly'
//param linkToDefaultDomain string = 'Enabled'
param httpsRedirect string = 'Enabled'
param endpointEnabledState string = 'Enabled'
param wafPolicyMode string = 'Detection'
param wafPolicyEnabledState string = 'Enabled'
param wafManagedRuleSets array = []
param wafCustomRules array = []
param wafPolicyRequestBodyCheck string = 'Enabled'
param securityPolicyPatternsToMatch array = [ '/*' ]


// Variables
var originGroupName = '${frontDoorName}origingrp'
var endpointName = '${frontDoorName}endppoint'
var wafPolicyName = '${frontDoorName}wafpolicy'
var securityPolicyName = '${frontDoorName}securitypolicy'

var supportedProtocols = [
  'Http'
  'Https'
]

var diagnosticSettingsName = 'diagnosticSettings'
var logCategories = [
  'FrontDoorAccessLog'
  'FrontDoorHealthProbeLog'
  'FrontDoorWebApplicationFirewallLog'
]
var metricCategories = [
  'AllMetrics'
]
var logs = [for category in logCategories: {
  category: category
  enabled: true
}]
var metrics = [for category in metricCategories: {
  category: category
  enabled: true
}]

// Resources
resource frontDoor 'Microsoft.Cdn/profiles@2022-11-01-preview' = {
  name: frontDoorName
  location: 'Global'
  tags: tags
  sku: {
    name: frontDoorSkuName
  }
  properties: {
    originResponseTimeoutSeconds: originResponseTimeoutSeconds
  }
}

resource endpoint 'Microsoft.Cdn/profiles/afdEndpoints@2022-11-01-preview' = {
  parent: frontDoor
  name: endpointName
  location: 'Global'
  properties: {
    autoGeneratedDomainNameLabelScope: toUpper(autoGeneratedDomainNameLabelScope)
    enabledState: endpointEnabledState
  }
}


resource wafPolicy 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2022-05-01' = {
  name: wafPolicyName
  location: 'Global'
  tags: tags
  sku: {
    name: frontDoorSkuName
  }
  properties: {
    policySettings: {
      enabledState: wafPolicyEnabledState
      mode: wafPolicyMode
      requestBodyCheck: wafPolicyRequestBodyCheck
    }
    managedRules: {
      managedRuleSets: wafManagedRuleSets
    }
    customRules: {
      rules: wafCustomRules
    }
  }
}

resource securityPolicy 'Microsoft.Cdn/profiles/securitypolicies@2022-11-01-preview' = {
  parent: frontDoor
  name: securityPolicyName
  properties: {
    parameters: {
      type: 'WebApplicationFirewall'
      wafPolicy: {
        id: wafPolicy.id
      }
      associations: [
        {
          domains: [
            {
              id: endpoint.id
            }
          ]
          patternsToMatch: securityPolicyPatternsToMatch
        }
      ]

    }
  }
}

// Diagnostics Settings
resource diagnosticSettings 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: diagnosticSettingsName
  scope: frontDoor
  properties: {
    workspaceId: workspaceId
    logs: logs
    metrics: metrics
  }
}

var parOrigins  = [for (origin, index) in origins: {
  name: '${frontDoorName}origin-${index}'
  hostName: origin.originHostName
  httpPort: httpPort
  httpsPort: httpsPort
  originHostHeader: origin.originHostName  
  priority: priority
  weight: weight
  enabledState: originEnabledState 
  privateLinkResourceId:privateLinkResourceId
  privateLinkLocation: location
  sampleSize: sampleSize
  successfulSamplesRequired: successfulSamplesRequired
  additionalLatencyInMilliseconds: additionalLatencyInMilliseconds  
  probePath: origin.probePath
  probeRequestType: probeRequestType
  probeProtocol: probeProtocol
  probeIntervalInSeconds: probeIntervalInSeconds
  sessionAffinityState: sessionAffinityState
}]

var parRoutes  = [for (origin, index) in origins: {
  name: '${frontDoorName}route-${index}'
  originPath: originPath
  ruleSets: ruleSets
  supportedProtocols: supportedProtocols
  patternsToMatch: routePatternsToMatch
  forwardingProtocol: forwardingProtocol
  linkToDefaultDomain: origin.linkToDefaultDomain
  httpsRedirect: httpsRedirect
}]

@batchSize(1)
module modDomainOriginMapping './submodules/domainorigin.bicep' =[for (origin, index) in origins: {
  name: take('${deployment().name}-${index}-${origin.domainprefix}', 54)
  params: {
    frontDoorName: frontDoorName
    originGroupName: '${originGroupName}-${index}'
    endpointName: endpointName
    customDomainName: '${origin.domainprefix}-apifirst-${index}'
    hostName: '${origin.domainprefix}.${customDomainSuffix}'
    originObject : parOrigins[index]
    routeObject: parRoutes[index]
  }
  dependsOn: [
    frontDoor
  ]
}]

// Outputs
output id string = frontDoor.id
output name string = frontDoor.name
output endpointFqdn string = endpoint.properties.hostName
